html {
    box-sizing: border-box;
    font-family:Georgia, 'Times New Roman', Times, serif;
    font-size: 16px;
}

*, 
*::after,
*::before {
    box-sizing: inherit;
}

.box {
    width: 200px;
    height: 200px;
    border: thick solid #000;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 4rem;
}

.card {
    width: 600px;
    height: 400px;
    border: thick solid #000;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
}

.card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0 50%; /* que empieze en cero del lado izquierdo */
}

/* Transiciones
    transition-property
    transition-duration cuanto dura
    transition-timing-function: none linear ease ease-in ease-out ease-in-out steps
    transition-delay un tiempo de espera antes que comience nuestra transicion
    transition: property duration timing-function delay

*/

.transitions .box {
    background-color: magenta;
    transition-property: background-color;
    transition-duration: 500ms;
    transition-timing-function: ease;
    transition-delay: 0.5s;
    transition: border-color 2s linear 1s; /* aquí por cascada lo anterior se reemplaza */
    transition: all 2s ease-in-out 250ms; 
    /* todas las propiedades que sean animables aplica estilo, en este caso son pocas */
    transition: background-color 2s ease-in-out 250ms,
        border-color 2s ease-in-out 250ms,
        border-radius 2s ease-in-out 250ms
}

.transitions .box:hover {
    background-color: cyan;
    border-color: red;
    border-radius: 2rem;
    /* border-style: dotted; no es una propiedad animable*/
}

.transitions .card {
    /* transition: all 2s ease; esto seria para todas*/
    transition: opacity 1s ease-out,
        border-color 3s steps(3),/* lo hará en pasos */
        filter 2s ease-in 1s,
        box-shadow 1.5s linear 2s;
    }

.transitions .card:hover {
    opacity: .75;
    border-color: orchid;
    filter: blur(0.rem);
    box-shadow: 1rem 1rem 2rem 0.5rem #000;
}

.transitions .card img {
    transition: object-position 2s ease-in 3s;
}

.transitions .card img:hover {
    object-position: 100% 50%;
}

.transform-2d img {
    transition: transform 2s ease-in-out;
}

.transform-2d img:hover {
    transform: none;  
    transform: translateX(5rem);
    transform: translateY(5rem);
    transform: translateX(-5rem); /* se va en sentido contrario */
    transform: translateZ(5rem); /* no aplica, seria para las transformaciones 3d */
    transform: translate(-5rem, 5rem); /* direcciona en diagonal */
    transform: translate(50%, 50%); /* no hay porcentaje negativo, pero en el caso de las transformaciones si */
    transform: translate(-50%, -50%);
    transform: translate(-50%, 100px);
    transform: scaleX(2); /* se estira la imagen horizontalmente */
    transform: scaleY(0.5); /* se achica */
    transform: scaleZ(1.5); /* necesitamos perspectiva y transformación en 3d para esta */
    transform: scale(1.5, 1.5); /* crece de ambos lados */
    transform: scale(-1, -1); /* se reduce, luego se expande pero la imagen invertida */
    transform: scale(-0.5, -0.5);
    transform: rotateX(60deg);
    transform: rotateX(90deg); /* es como si quedara la img mirando hacia arriba */
    transform: rotateY(60deg);
    transform: rotateY(90deg);
    transform: rotateZ(60deg); /* gira en el sentido del reloj */
    transform: rotateZ(-60deg); /* sentido contrario del reloj */
    transform: rotateZ(360deg); /* rotateZ en 360 y rotate en 360 seria lo mismo */
    transform: rotate(-360deg); /* sentido contrario del reloj */
    transform: skewX(20deg); /* sesgo, en diagonal gira */
    transform: skewX(-20deg);
    transform: skewY(20deg);
    transform: skewY(-20deg);
    transform: skew(20deg, 20deg);
    /* Matrix tiene una carga pesada, link para más info en el document */
    /* matrix scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY() */
    transform: matrix(1, 2, 2, 1, 20, 10);
    transform: translate(25%, -50%);
    transform: translate(25%, -50%) 
        rotate(240deg) 
        skew(10deg, 20deg) /* sesgo */
        scale(-0.5, -0.5); 
}

/* Antes de empezar con 3d tener activada la perspectiva. Otra opción, aplicarle a la caja contenedora*/
.transform-3d {  
    perspective: 10rem;
} 

.transform-3d img {
    transition: transform 2s ease-in-out;
}

.transform-3d img:hover {
    transform: translateZ(4rem); /* asi solo no funciona */
    transform: perspective(1000px) translateZ(4rem); /* profundidad en z, acercar alejar */
    transform: perspective(10rem) translateZ(4rem); 
    transform: perspective(10rem) translateZ(-4rem); /* -4 se aleja */
    /*  */
    transform: translate3d(2rem, 50%, -3rem);
    transform: scaleZ(1.5); /* en este caso no funciona xq la imagen solo tiene 2 medidas, alto y ancho */
    transform: scale3d(2, 0.5, 3);
    transform: rotateX(60deg); /* 2d no funciona */
    transform: rotateX(90deg); 
    transform: rotateY(60deg); 
    transform: rotateY(-90deg); /* no puedo generar scroll hacia la izquierda */
    transform: rotate3d(1, 1, 1, 45deg);
    transform: rotate3d(1, 0.5, 0, -45deg);
    transform: rotate3d(-1, 2.5, -2, 60deg);
    /* recibe 16 valores -> matrix3d */
    transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
    transform: rotate3d(-1,2.5,-2,60deg);
    transform: rotate3d(-1,2.5,-2,60deg)translate3d(2rem, 50%, -3rem) scale3d(2, -0.5,3);
}

.transform-origin img {
    transition: transform 2s ease-in-out;
    /* transform-origin: x y z; */
    transform-origin: 50% 50% 0;
    transform-origin: 0 0; /* gira completamente, tomando como punto la izquierda superior */
    transform-origin: 0;
    transform-origin: top left; /* podriamos hacer todas las combinaciones */
    transform-origin: top right;
    transform-origin: center left;
    transform-origin: -2rem -3rem;
    transform-origin: 25% 75%;
    transform-origin: -5% -5%; 
}

.transform-origin img:hover {
    transform: rotate(360deg);
}

/* Ejemplo para maquetar una card animada */
.flip-card-1,
.flip-card-2 {
    width: 600px;
    height: 400px;
    border: thick solid #000;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;

    position: relative;
    cursor: pointer;
    transition: transform 1s ease-in-out;
    perspective: 10rem;
    /* transform-style: flat; default */
    transform-style: preserve-3d; /* que los hijos tengan su perspectiva independiente */
}

.flip-card-2 {
    transform-origin: center right;
}

.flip-card-1:hover {
    transform: rotateY(180deg);
}

.flip-card-2:hover {
    transform: translateX(-100%) rotateY(-180deg);
}

.flip-card-1 img,
.flip-card-2 img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0 50%; 
}

.flip-face {
    position: absolute;
    width: 100%;
    height: 100%;
    /* backface-visibility: visible; default*/
    backface-visibility: hidden;
}

.flip-front {
    transform: rotateY(0deg);
}

.flip-back {
    transform: rotateY(180deg);
}
/*  */
